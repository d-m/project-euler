"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
import math


def triangle_number(n):
    return n * (n + 1) // 2

def generate_triangle_numbers():
    n = 1
    while True:
        yield triangle_number(n)
        n += 1

def find_divisors(n):
    for i in range(1, math.ceil(math.sqrt(n))):
        if n % i == 0:
            divisor1, divisor2 = i, n // i
            if divisor1 == divisor2:
                yield divisor1
            else:
                yield divisor1
                yield divisor2

def euler():
    for triangle_number in generate_triangle_numbers():
        for i, _ in enumerate(find_divisors(triangle_number), 1):
            if i >= 500:
                return triangle_number

print(euler())
    